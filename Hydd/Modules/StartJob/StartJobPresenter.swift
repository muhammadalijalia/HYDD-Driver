//
//  StartJobPresenter.swift
//  HYDD-driver
//
//  Created Syed Kashan on 09/02/2020.
//  Copyright Â© 2020 Syed Kashan. All rights reserved.
//
//  Template generated by Syed Kashan
//

import UIKit

class StartJobPresenter: StartJobPresenterProtocol, StartJobInteractorOutputProtocol {
    
    var isJobCancelled: Bool?
    var screenType: ScreenTypeVehicleDetail?
    var missionData: CarSummaryModel?
    
    weak private var view: StartJobViewProtocol?
    var interactor: StartJobInteractorInputProtocol?
    private let router: StartJobWireframeProtocol

    init(interface: StartJobViewProtocol, interactor: StartJobInteractorInputProtocol?, router: StartJobWireframeProtocol) {
        self.view = interface
        self.interactor = interactor
        self.router = router
    }

    func goBack() {
        self.router.goBack()
    }
    
    func startPressed() {
        guard let type = screenType else {return}
        switch type {
        case .progress:
            if let modelName = self.missionData?.modelName {
                router.gotoStartVerify(classVehicle: modelName)
            }
        case .listing:
            if let modelName = self.missionData?.modelName {
                guard let classes = HCM.shared.getCarClass() else {
                    router.gotoRegisterCar(classVehicle: modelName)
                    return }
                if let data = classes.filter({$0.model == modelName}).first {
                    printHydd(data)
                    router.gotoAcceptJob(classVehicle: modelName)
                } else {
                    router.gotoRegisterCar(classVehicle: modelName)
                }
            }
        }
    }
    
    func cancelPressed() {
        router.gotoCancelJob()
    }
    
    func gotoNavigation(car: String) {
        guard let idMission = self.missionData?.id else {return}
        view?.showLoader()
        interactor?.startMisson(missionId: idMission, plateNumber: car)
    }
    
    func acceptJob(car: MyCarDetailModel) {
        guard let idMission = self.missionData?.id,
            let idPackage = self.missionData?.packageId else {return}
        view?.showLoader()
        let para = ["vehicle": car.id,
                    "mission": idMission,
                    "package": idPackage]
        interactor?.registerMission(para: para, plateNumber: car.numberPlate)
    }
    func cancelJob() {
        guard let idMission = self.missionData?.id else {return}
        view?.showLoader()
        interactor?.cancelJob(missionId: idMission)
    }
    
    func successUpdatePlateNumber() {
        
    }
    
    func failureUpdatePlateNumber(text: String) {
        print(text)
    }
    
    func successRegister() {
        view?.hideLoader()
        DispatchQueue.main.async {
            self.router.acceptJob()
        }
    }
    func failureRegister(text: String) {
        view?.hideLoader()
        DispatchQueue.main.async {
            HMM.shared.showError(title: DJM.shared.getValue(view: "start_job_view", variable: "error"), message: text)
        }
    }
    
    func successStart() {
        view?.hideLoader()
        DispatchQueue.main.async {
            self.router.gotoNavigation(car: "")
        }
    }
    func failureStart(text: String) {
        view?.hideLoader()
        DispatchQueue.main.async {
            HMM.shared.showError(title: DJM.shared.getValue(view: "start_job_view", variable: "error"), message: text)
        }
    }
    
    func gotoCarRegisterScreen() {
        router.gotoCarRegisterScreen()
    }
    
    func trackMissionPressed() {
//        if HDCM.shared.clientUserDetails == nil {
          guard let model = self.missionData else {return}
          let clientData = convertCarSummaryToClientModel(model: model)
          HDCM.shared.setCustomerDetails(set: clientData)
//        }
        router.gotoNavigation(car: "")
    }
    func convertCarSummaryToClientModel(model: CarSummaryModel) -> ClientModel {
        let clientModel = ClientModel()
        clientModel.missionId = model.id
        clientModel.userImage = model.userImage
        clientModel.pickupLocation = model.pickupLocation
        clientModel.pickLat = model.pickLat
        clientModel.pickLong = model.pickLong
        clientModel.destinationLocation = model.destinationLocation
        clientModel.destLat = model.destLat
        clientModel.destLong = model.destLong
        clientModel.pickupDateTime = model.pickupDateTimestamp
        clientModel.endMissionDateTime = model.destinationDate
        clientModel.status = model.status
        clientModel.totalFare = model.totalFare
        clientModel.userId = model.userId
        clientModel.package = model.packageId
        clientModel.firstName = model.userFname
        clientModel.lastName = model.userLname
        clientModel.orderName = model.orderName
        clientModel.total_hours = model.total_hours
        clientModel.total_km = Int(model.total_km)
        clientModel.rem_sec = "\(model.rem_sec)" as NSString
        clientModel.rem_km = "\(model.rem_km)" as NSString
        return clientModel
    }
    
    func successCancelJob() {
        view?.hideLoader()
        DispatchQueue.main.async {
            self.router.goBack()
        }
    }
    func failureCancelJob(text: String) {
        view?.hideLoader()
        DispatchQueue.main.async {
            HMM.shared.showError(title: DJM.shared.getValue(view: "start_job_view", variable: "error"), message: text)
        }
    }
    
}
