//
//  StartJobViewController.swift
//  HYDD-driver
//
//  Created Syed Kashan on 09/02/2020.
//  Copyright Â© 2020 Syed Kashan. All rights reserved.
//
//  Template generated by Syed Kashan
//

import UIKit

class StartJobViewController: BaseViewController, StartJobViewProtocol {
    
    @IBOutlet weak var tableViewStartJob: UITableView!
    var presenter: StartJobPresenterProtocol?
    
    override func viewDidLoad() {
        super.viewDidLoad()
        self.setupView()
    }
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        self.navigationController?.tabBarController?.tabBar.isHidden = true
        self.setupNavigation()
    }
    override func viewWillDisappear(_ animated: Bool) {
        super.viewWillDisappear(animated)
        self.navigationController?.tabBarController?.tabBar.isHidden = false
    }
    @IBAction func backButtonPressed(_ sender: UIButton) {
        self.presenter?.goBack()
    }
    
    func showLoader() {
        DispatchQueue.main.async {
            self.showLoadingIndicator()
        }
    }
    func hideLoader() {
        DispatchQueue.main.async {
            self.hideLoadingIndicator()
        }
    }
}
extension StartJobViewController: SetupViewController {
    func setupNavigation() {
        self.navigationController?.setNavigationBarHidden(false, animated: false)
        self.setNavigationWithLogoAndBackButton().addTarget(self, action: #selector(backButtonPressed(_:)), for: .touchUpInside)
    }
    func setupView() {
        presenter?.isJobCancelled = false
        tableViewStartJob.delegate = self
        tableViewStartJob.dataSource = self
        tableViewStartJob.register(UINib(nibName: "StartJobTableViewCell", bundle: nil), forCellReuseIdentifier: "StartJobTableViewCell")
        tableViewStartJob.register(UINib(nibName: "StartJobFooterCell", bundle: nil), forHeaderFooterViewReuseIdentifier: "StartJobFooterCell")
    }
    func networkRequest() {
    }
    func reloadView() {
        tableViewStartJob.reloadData()
    }
    
}

extension StartJobViewController: UITableViewDelegate {
    
}

extension StartJobViewController: UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return 1
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        guard let cell = tableViewStartJob.dequeueReusableCell(withIdentifier: "StartJobTableViewCell") as? StartJobTableViewCell else {return UITableViewCell()}
        guard let data = self.presenter?.missionData else {return UITableViewCell()}
        if data.status == "cancel" {
            let _ = cell.viewMission.isCancelledView
        } else if data.status == "close" {
            let _ = cell.viewMission.isAcceptedView
        }
        cell.configureCell(object: data)
        return cell
    }
    func tableView(_ tableView: UITableView, viewForFooterInSection section: Int) -> UIView? {
        guard let footer = tableViewStartJob.dequeueReusableHeaderFooterView(withIdentifier: "StartJobFooterCell") as? StartJobFooterCell,
            let type = presenter?.screenType else {return UIView()}
        footer.delegate = self
        footer.configureCell(object: type)
        guard let data = self.presenter?.missionData else {return UIView()}
        footer.viewTrackLocation.isHidden = true
        giveBtnCornerRadiusWithTheDarkBackGround(view: footer.viewAccept, btn: footer.buttonStartJob)
        giveBtnCornerRadiusWithTheDarkBackGround(view: footer.viewCancel, btn: footer.buttonCancel, type: .cancel)
        if data.status == "cancel" {
            footer.viewCancel.isHidden = true
            footer.buttonStartJob.isEnabled = false
            giveBtnCornerRadiusWithTheDarkBackGround(view: footer.viewAccept, btn: footer.buttonStartJob, type: .missionCancelled)
        } else if data.status == "close" {
            footer.viewCancel.isHidden = true
            footer.buttonStartJob.isEnabled = true
        } else if data.status == "in_progress" || data.status == "waiting for client" || data.status == "day completed" || data.status == "client onboard" {
            footer.viewCancel.isHidden = true
            footer.viewAccept.isHidden = true
            footer.viewTrackLocation.isHidden = false
            giveBtnCornerRadiusWithTheDarkBackGround(view: footer.viewTrackLocation, btn: footer.buttonTrackLocation)
        }
        return footer
    }
    func tableView(_ tableView: UITableView, heightForFooterInSection section: Int) -> CGFloat {
        guard let type = self.presenter?.screenType else {return 120}
        switch type {
        case .progress:
            guard let data = self.presenter?.missionData else {return 0}
            if data.status == "cancel" || data.status == "in_progress" || data.status == "waiting for client" || data.status == "day completed" || data.status == "client onboard" {
                return 60
            } else if data.status == "close" {
                return CGFloat.leastNormalMagnitude
            }
            return 120
        case .listing:
            return 60
        }
        
    }
    func tableView(_ tableView: UITableView, heightForHeaderInSection section: Int) -> CGFloat {
        return CGFloat.leastNormalMagnitude
    }
}

extension StartJobViewController: StartJobFooterCellProtocol {
    func trackPressed() {
        presenter?.trackMissionPressed()
    }
    
    func cancelPressed() {
        presenter?.cancelPressed()
    }
    func startPressed() {
        presenter?.startPressed()
    }
}

extension StartJobViewController: StartJobPopUpDelegate, CancelJobPopUpProtocol, AcceptJobPopProtocol,
RegisterPopUpDelegate {
    func actionRegisterCar() {
        self.presenter?.gotoCarRegisterScreen()
    }
    func actionAcceptJob(car: MyCarDetailModel) {
        self.presenter?.acceptJob(car: car)
    }
    func actionCancelJob() {
        self.presenter?.cancelJob()
    }
    func actionOk(car: String) {
        self.presenter?.gotoNavigation(car: car)
    }
}
