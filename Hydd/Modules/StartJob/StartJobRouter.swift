//
//  StartJobRouter.swift
//  HYDD-driver
//
//  Created Syed Kashan on 09/02/2020.
//  Copyright Â© 2020 Syed Kashan. All rights reserved.
//
//  Template generated by Syed Kashan
//

import UIKit

class StartJobRouter: StartJobWireframeProtocol {

    weak var viewController: UIViewController?

    static func createModule(_ screenType: ScreenTypeVehicleDetail?, dataList: CarSummaryModel? = nil) -> UIViewController {
        // Change to get view from storyboard if not using progammatic UI
        let view = StartJobViewController(nibName: nil, bundle: nil)
        let interactor = StartJobInteractor()
        let router = StartJobRouter()
        let presenter = StartJobPresenter(interface: view, interactor: interactor, router: router)
        presenter.missionData = dataList
        presenter.screenType = screenType
        view.presenter = presenter
        interactor.presenter = presenter
        router.viewController = view

        return view
    }
    
    func goBack() {
        guard let nav = self.viewController?.navigationController else { return }
        nav.popViewController(animated: true)
    }
    
    func gotoStartVerify(classVehicle: String) {
        guard let view = self.viewController as? StartJobViewController else { return }
        let storyboard = UIStoryboard(name: "Main", bundle: nil)
        let controller = (storyboard.instantiateViewController(withIdentifier: "PopupViewController") as? PopupViewController)!
        controller.type = .StartJob
        controller.classVehicle = classVehicle
        controller.startDelegate = view
        view.present(controller, animated: false, completion: nil)
        
    }
    
    func gotoAcceptJob(classVehicle: String) {
        guard let view = self.viewController as? StartJobViewController else {return }
        let storyboard = UIStoryboard(name: "Main", bundle: nil)
        let controller = (storyboard.instantiateViewController(withIdentifier: "PopupViewController") as? PopupViewController)!
        controller.type = .Accept
        controller.classVehicle = classVehicle
        controller.acceptDelegate = view
        view.present(controller, animated: false, completion: nil)
    }
    
    
    func gotoCancelJob() {
        guard let view = self.viewController as? StartJobViewController else {return }
        let storyboard = UIStoryboard(name: "Main", bundle: nil)
        let controller = (storyboard.instantiateViewController(withIdentifier: "PopupViewController") as? PopupViewController)!
        controller.type = .CancelJob
        controller.cancelJobDelegate = view
        view.present(controller, animated: false, completion: nil)
        
    }
    
    func gotoRegisterCar(classVehicle: String) {
        guard let view = self.viewController as? StartJobViewController else {return }
        let storyboard = UIStoryboard(name: "Main", bundle: nil)
        let controller = (storyboard.instantiateViewController(withIdentifier: "PopupViewController") as? PopupViewController)!
        controller.classVehicle = classVehicle
        controller.type = .RegisterVehicle
        controller.registerCarDelegate = view
        view.present(controller, animated: false, completion: nil)
        
    }
    
    func gotoNavigation(car: String) {
        guard let nav = self.viewController?.navigationController else { return }
        let controller = NavigationRouter.createModule()
        nav.pushViewController(controller, animated: true)
    }
    
    func acceptJob() {
        guard let nav = self.viewController?.navigationController else { return }
        let controller = CongratulationJobRouter.createModule(.congratulation)
        nav.pushViewController(controller, animated: true)
    }
    
    func gotoCarRegisterScreen() {
        guard let nav = self.viewController?.navigationController else { return }
        let controller = RegisterRouter.createModule()
        nav.pushViewController(controller, animated: true)
    }
    
}
