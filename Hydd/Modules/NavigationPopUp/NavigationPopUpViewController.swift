//
//  NavigationPopUpViewController.swift
//  HYDD-driver
//
//  Created Kashan on 12/04/2020.
//  Copyright Â© 2020 Syed Kashan. All rights reserved.
//
//  Template generated by Syed Kashan

protocol NavigationPopupDelegate: class {
    func actionOnboard()
    func actionDayCompleted()
    func actionWaiting()
    func actionClose()
    func actionNoShow()
    func actionDismiss()
    
}
import UIKit

class NavigationPopUpViewController: UIViewController, NavigationPopUpViewProtocol {
    
    @IBOutlet weak var imageDayCompleted: UIImageView!
    @IBOutlet weak var labelOnBoard: UILabel!
    @IBOutlet weak var labelWaiting: UILabel!
    @IBOutlet weak var labelCompleted: UILabel!
    @IBOutlet weak var lblNoShow: UILabel!
    @IBOutlet weak var lblCloseMission: UILabel!
    @IBOutlet weak var mainStackView: UIStackView!
    @IBOutlet weak var noshowStackView: UIStackView!
    @IBOutlet weak var viewNoShow: RoundShadowView!
    
    var presenter: NavigationPopUpPresenterProtocol?
    
    weak var delegate: NavigationPopupDelegate?
    
    override func viewDidLoad() {
        super.viewDidLoad()
        labelOnBoard.attributedText = DJM.shared.getValue(view: "navigation_popup_view", variable: "clientonboard").styled(as: .gibsonRegular_14sp_hyddBlue)
        labelWaiting.attributedText = DJM.shared.getValue(view: "navigation_popup_view", variable: "waiting").styled(as: .gibsonRegular_14sp_hyddBlue)
        lblCloseMission.attributedText = DJM.shared.getValue(view: "navigation_popup_view", variable: "close").styled(as: .gibsonRegular_14sp_hyddBlue)
         lblNoShow.attributedText = DJM.shared.getValue(view: "navigation_popup_view", variable: "noshow").styled(as: .gibsonRegular_14sp_hyddBlue)
        guard let orderType = HDCM.shared.clientUserDetails?.orderName else {return}
        if orderType == "Transfer" {
            noshowStackView.isHidden = true
        } else {
            let aspectRatioConstraint = NSLayoutConstraint(item: mainStackView as Any, attribute: .width,relatedBy: .equal,toItem: mainStackView,attribute: .height,multiplier: 0.8,constant: 0)
            mainStackView.addConstraint(aspectRatioConstraint)
            mainStackView.aspectRation(0.8).isActive = true
            labelCompleted.attributedText = DJM.shared.getValue(view: "navigation_popup_view", variable: "daycomplete").styled(as: .gibsonRegular_14sp_hyddBlue)
            imageDayCompleted.image = UIImage(named: "icon_day_completed")
        }
    }
    @IBAction func actionCross(_ sender: UIButton) {
        self.delegate?.actionDismiss()
    }
    @IBAction func actionOnboard(_ sender: UIButton) {
        self.delegate?.actionOnboard()
        dismiss(animated: true, completion: nil)
    }
    @IBAction func actionWaiting(_ sender: UIButton) {
        self.delegate?.actionWaiting()
        dismiss(animated: true, completion: nil)
    }
    @IBAction func actionDayCompleted(_ sender: UIButton) {
//        guard let orderType = HDCM.shared.clientUserDetails?.orderName else {return}
//        if orderType == "Transfer" {
//            self.delegate?.actionNoShow()
//        } else {
            self.delegate?.actionDayCompleted()
        //}
        dismiss(animated: true, completion: nil)
    }
    @IBAction func actionNoShow(_ sender: Any) {
        self.delegate?.actionNoShow()
        dismiss(animated: true, completion: nil)
    }
    
    @IBAction func actionCloseMission(_ sender: Any) {
        self.delegate?.actionClose()
        dismiss(animated: true, completion: nil)
    }
    
    
}

extension UIView {
    func aspectRation(_ ratio: CGFloat) -> NSLayoutConstraint {
        return NSLayoutConstraint(item: self, attribute: .height, relatedBy: .equal, toItem: self, attribute: .width, multiplier: ratio, constant: 0)
    }
}
