//
//  RegisterPresenter.swift
//  HYDD-driver
//
//  Created Syed Kashan on 26/01/2020.
//  Copyright Â© 2020 Syed Kashan. All rights reserved.
//
//  Template generated by Syed Kashan
//

import UIKit

class RegisterPresenter: RegisterPresenterProtocol, RegisterInteractorOutputProtocol {
    
    var brandId: Int?
    var modelId: Int?
    var model: String?
    var brand: String?
    var color: String?
    var year: String?
    var plateNumber: String?
    var brandModel: [BrandsModel]?

    weak private var view: RegisterViewProtocol?
    var interactor: RegisterInteractorInputProtocol?
    private let router: RegisterWireframeProtocol

    init(interface: RegisterViewProtocol, interactor: RegisterInteractorInputProtocol?, router: RegisterWireframeProtocol) {
        self.view = interface
        self.interactor = interactor
        self.router = router
    }
    
    func succesfullRequest(message: String) {
        view?.hideLoader()
        DispatchQueue.main.async {
//            HMM.shared.showStatusSuccess(message: "Car registered successfully")
            guard let id = HUM.shared.user?.id else {return}
            HCM.shared.getCars(id: id) { (_) in}
            self.router.gotoRequestScreen()
        }
    }
    func failedRequest(message: String) {
        view?.hideLoader()
        DispatchQueue.main.async {
            HMM.shared.showError(title: DJM.shared.getValue(view: "registeration_view", variable: "error"), message: message)
        }
    }
    
    func success(brands: [BrandsModel]) {
        view?.hideLoader()
        DispatchQueue.main.async {
            self.brandModel = brands
        }
    }
    func failed() {
        view?.hideLoader()
        DispatchQueue.main.async {
            self.goBack()
        }
    }
    
    func set(model: Int) {
        self.modelId = model
    }
    func set(brand: Int) {
        self.brandId = brand
    }
    func set(color: String) {
        self.color = color
    }
    func set(year: String) {
        self.year = year
    }
    func set(plateNumber: String) {
        self.plateNumber = plateNumber
    }
    
    func register() {
        guard let model = self.modelId,
            let brand = self.brandId,
            let color = self.color,
            let year = self.year,
            let plate = self.plateNumber else {return}
        let para = [
                "number_plate": plate,
                "color": color,
                "model": model,
                "status": 1,
                "year": year,
                "brand":brand] as [String: Any]
        view?.showLoader()
        interactor?.register(para: para)
        
    }
    func getBrands() {
        view?.showLoader()
        interactor?.getBrands()
    }
    
    
    func goBack() {
        self.router.goBack()
    }

}
