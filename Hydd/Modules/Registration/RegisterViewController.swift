//
//  RegisterViewController.swift
//  HYDD-driver
//
//  Created Syed Kashan on 26/01/2020.
//  Copyright Â© 2020 Syed Kashan. All rights reserved.
//
//  Template generated by Syed Kashan
//

import UIKit
import IQKeyboardManager

class RegisterViewController: BaseViewController, RegisterViewProtocol {

    @IBOutlet weak var viewSubmit: UIView!
    @IBOutlet weak var viewSeperator: UIView!
    @IBOutlet weak var labelTitle: UILabel!
    @IBOutlet weak var textfieldBrand: UITextField!
    @IBOutlet weak var textfieldModel: UITextField!
    @IBOutlet weak var textfieldYear: UITextField!
    @IBOutlet weak var textfieldColor: UITextField!
    @IBOutlet weak var textfieldPlate: UITextField!
    @IBOutlet weak var buttonSubmit: UIButton!
    
    var pickerViewBrand = UIPickerView()
    var pickerViewModel = UIPickerView()
    
    enum RegisterTF: Int {
        case model = 1, brand, year, color, plate
    }
    var presenter: RegisterPresenterProtocol?
    
	override func viewDidLoad() {
        super.viewDidLoad()
        self.setupView()
        self.networkRequest()
        IQKeyboardManager.shared().isEnableAutoToolbar = true
    }
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        self.setupNavigation()
        self.navigationController?.tabBarController?.tabBar.isHidden = true
    }
    override func viewWillDisappear(_ animated: Bool) {
        super.viewWillDisappear(animated)
        self.navigationController?.tabBarController?.tabBar.isHidden = false
    }
    @IBAction func actionSubmit(_ sender: Any) {
        self.presenter?.register()
    }
    
    @IBAction func backButtonPressed(_ sender: UIButton) {
        self.presenter?.goBack()
    }
}

extension RegisterViewController: SetupViewController {
    func setupNavigation() {
        self.navigationController?.setNavigationBarHidden(false, animated: false)
        self.setNavigationWithLogoAndBackButton().addTarget(self, action: #selector(backButtonPressed(_:)), for: .touchUpInside)
    }
    
    func setupView() {
        giveBtnCornerRadiusWithTheDarkBackGround(view: viewSubmit, btn: buttonSubmit)
        self.labelTitle.attributedText = DJM.shared.getValue(view: "registeration_view", variable: "register").styled(as: .gibsonRegular_13sp)
        self.viewSeperator.backgroundColor = .hyddblue
        self.buttonSubmit.backgroundColor = .hyddblue
        self.buttonSubmit.setAttributedTitle(DJM.shared.getValue(view: "registeration_view", variable: "submit").styled(as: .helveticaRegular_20sp), for: .normal)
        self.buttonSubmit.roundCorners(6)
        self.setupTextField()
        pickerViewBrand.delegate = self
        pickerViewBrand.dataSource = self
        pickerViewModel.delegate = self
        pickerViewModel.dataSource = self
        IQKeyboardManager.shared().isEnableAutoToolbar = true
        
    }
    
    func networkRequest() {
        self.presenter?.getBrands()
    }
    
    func setupTextField() {
        self.registerTFDelegate()
        self.setToolbar()
        self.setUpTF(tf: textfieldPlate, placeholder: DJM.shared.getValue(view: "registeration_view", variable: "plateno"), tag: .plate)
        self.setUpTF(tf: textfieldModel, placeholder: DJM.shared.getValue(view: "registeration_view", variable: "model"), tag: .model)
        self.setUpTF(tf: textfieldBrand, placeholder: DJM.shared.getValue(view: "registeration_view", variable: "brand"), tag: .brand)
        self.setUpTF(tf: textfieldYear, placeholder: DJM.shared.getValue(view: "registeration_view", variable: "year"), tag: .year)
        self.setUpTF(tf: textfieldColor, placeholder: DJM.shared.getValue(view: "registeration_view", variable: "color"), tag: .color)
        textfieldBrand.inputView = pickerViewBrand
        textfieldModel.inputView = pickerViewModel
    }
    
    func setUpTF(tf: UITextField, placeholder: String, tag: RegisterTF) {
        tf.attributedPlaceholder = placeholder.styled(as: .gibsonRegular_15sp_placeholder)
        tf.tag = tag.rawValue
        tf.delegate = self
    }
    
    func showLoader() {
        DispatchQueue.main.async {
            self.showLoadingIndicator()
        }
    }
    
    func hideLoader() {
        DispatchQueue.main.async {
            self.hideLoadingIndicator()
        }
    }
    func getModels() -> [ModelCar]? {
        var brands = [ModelCar]()
        guard let data = self.presenter?.brandModel,
            let brandid = self.presenter?.brandId else {return nil}
        brands = data.filter({ $0.id == brandid}).first?.model ?? [ModelCar]()
        return brands
    }
}
extension RegisterViewController {
    func setToolbar() {
        textfieldModel.autocorrectionType = .no
        textfieldYear.autocorrectionType = .no
        textfieldBrand.autocorrectionType = .no
        textfieldColor.autocorrectionType = .no
        textfieldPlate.autocorrectionType = .no
    }
    
    @objc func doneButtonAction() {
        self.view.endEditing(true)
    }
    
    func registerTFDelegate() {
        self.textfieldPlate.addTarget(self, action: #selector(textFieldDidChange(_:)), for: .editingChanged)
        self.textfieldColor.addTarget(self, action: #selector(textFieldDidChange(_:)), for: .editingChanged)
        self.textfieldBrand.addTarget(self, action: #selector(textFieldDidChange(_:)), for: .editingChanged)
        self.textfieldYear.addTarget(self, action: #selector(textFieldDidChange(_:)), for: .editingChanged)
        self.textfieldModel.addTarget(self, action: #selector(textFieldDidChange(_:)), for: .editingChanged)
    }
}

// MARK: TEXT FIELD DELEGATE HANDLING
extension RegisterViewController: UITextFieldDelegate {
    func textFieldDidBeginEditing(_ textField: UITextField) {
        if textField == textfieldBrand {
            if textField.text?.count ?? 0 < 1 {
                guard let data = self.presenter?.brandModel?[0] else {return }
                self.textfieldBrand.text = data.name
                self.presenter?.set(brand: data.id)
            }
        } else if textField == textfieldModel {
            if textField.text?.count ?? 0 < 1 {
                guard let data = getModels() else {return}
                self.textfieldModel.text = data[0].name
                self.presenter?.set(model: data[0].id)
            }
        }
    }
    @objc func textFieldDidChange(_ textField: UITextField) {
        guard let type = RegisterTF(rawValue: textField.tag) else { return }
        let text = textField.text
        switch type {
        case .model:
            break
        case .brand:
            break
        case .year:
            self.presenter?.set(year: text ?? "")
        case .color:
            self.presenter?.set(color: text ?? "")
        case .plate:
            self.presenter?.set(plateNumber: text ?? "")
        }
    }
    func textFieldShouldReturn(_ textField: UITextField) -> Bool {
        textField.resignFirstResponder()
        return true
    }
}

extension RegisterViewController: UIPickerViewDelegate, UIPickerViewDataSource {
    func numberOfComponents(in pickerView: UIPickerView) -> Int {
        return 1
    }
    
    func pickerView(_ pickerView: UIPickerView, numberOfRowsInComponent component: Int) -> Int {
        if textfieldBrand.isFirstResponder && pickerView == pickerViewBrand {
            guard let data = self.presenter?.brandModel else {return 0}
            return data.count
        } else if textfieldModel.isFirstResponder && pickerView == pickerViewModel {
            guard let data = getModels() else {return 0}
            return data.count
        } else {
            return 0
        }
    }
    
    func pickerView(_ pickerView: UIPickerView, titleForRow row: Int, forComponent component: Int) -> String? {
        if textfieldBrand.isFirstResponder && pickerView == pickerViewBrand {
            guard let data = self.presenter?.brandModel?[row] else {return ""}
            return data.name
        } else if textfieldModel.isFirstResponder && pickerView == pickerViewModel {
            guard let data = getModels() else {return ""}
            return data[row].name
        } else {
            return ""
        }
    }
    
    func pickerView(_ pickerView: UIPickerView, didSelectRow row: Int, inComponent component: Int) {
        if textfieldBrand.isFirstResponder && pickerView == pickerViewBrand {
            guard let data = self.presenter?.brandModel?[row] else {return }
            self.textfieldBrand.text = data.name
            self.presenter?.set(brand: data.id)
        } else if textfieldModel.isFirstResponder && pickerView == pickerViewModel {
            guard let data = getModels() else {return}
            self.textfieldModel.text = data[row].name
            self.presenter?.set(model: data[row].id)
        }
    }
}
