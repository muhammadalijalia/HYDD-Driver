//
//  RegisterInteractor.swift
//  HYDD-driver
//
//  Created Syed Kashan on 26/01/2020.
//  Copyright Â© 2020 Syed Kashan. All rights reserved.
//
//  Template generated by Syed Kashan
//

import UIKit

class RegisterInteractor: RegisterInteractorInputProtocol {
    
    weak var presenter: RegisterInteractorOutputProtocol?
    
    static let apiClient = APIClient()
    var registerTask: URLSessionDataTask!
    var brandTask: URLSessionDataTask!
    
    func register(para: [String : Any]) {
        guard let id = HUM.shared.user?.id else {return}
        HUM.shared.getToken { isSuccess in
            if isSuccess{
                self.registerTask?.cancel()
                let registerUrl = URLRequest(url: NETWORKCONSTANTS.registerCar(id: id),
                                             method: URLRequest.HTTPMethod.post,
                                             body: para)
                self.registerTask = RegisterInteractor.apiClient.dataTask(registerUrl) {[weak self] response in
                    //Response
                    response.successResponse.flatMap { (data, response) in
                        printHydd("Response is \(data) \nResponse \(response)")
                        printHydd(String(decoding: data, as: UTF8.self))
                        if let dataDictionary = data.getJSONFromData() {
                            if let message = dataDictionary["message"] as? [String:[String]]  {
                                if let key = message.first?.key, let value = message.first?.value.first  {
                                    self?.presenter?.failedRequest(message: "\(key): \(value)")
                                }
                            } else {
                                self?.presenter?.succesfullRequest(message: "")
                            }
                        } else {
                            self?.presenter?.failedRequest(message: DJM.shared.getValue(view: "registeration_view", variable: "went_wrong"))
                        }
                    }
                }
            }
        }
    }
    
    func getBrands() {
        HUM.shared.getToken { isSuccess in
            if isSuccess{
                self.brandTask?.cancel()
                let carUrl = URLRequest(url: NETWORKCONSTANTS.META.getVehicleModel,
                                        method: URLRequest.HTTPMethod.get,
                                        body: nil)
                self.brandTask = RegisterInteractor.apiClient.dataTask(carUrl) {[weak self] response in
                    //Response
                    response.successResponse.flatMap { (data, response) in
                        printHydd("Response is \(data) \nResponse \(response)")
                        printHydd(String(decoding: data, as: UTF8.self))
                        if let dataDictionary = data.getJSONFromData() {
                            if let message = dataDictionary["message"] as? String {
                                printHydd(message)
                                self?.presenter?.failed()
                            } else {
                                if let data = dataDictionary["data"] as? [[String: Any]] {
                                    var models = [BrandsModel]()
                                    data.forEach { (cardata) in
                                        if let brand = BrandsModel(JSON: cardata) {
                                            models.append(brand)
                                        }
                                    }
                                    self?.presenter?.success(brands: models)
                                }
                            }
                        } else {
                            self?.presenter?.failedRequest(message: DJM.shared.getValue(view: "registeration_view", variable: "went_wrong"))
                        }
                    }
                }
            }
        }
    }
}
