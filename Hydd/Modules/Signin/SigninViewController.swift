//
//  SigninViewController.swift
//  Hydd
//
//  Created Syed Kashan on 05/01/2020.
//  Copyright Â© 2020 Syed Kashan. All rights reserved.
//
//  Template generated by Syed Kashan

import UIKit

class SigninViewController: BaseViewController {
    
    @IBOutlet weak var buttonEye: UIButton!
    @IBOutlet weak var viewButton: UIView!
    @IBOutlet weak var scrollLogin: UIScrollView!
    @IBOutlet weak var textfieldEmail: FloatingTextField!
    @IBOutlet weak var textfieldPassword: FloatingTextField!
    @IBOutlet weak var buttonForgotPassword: UIButton!
    @IBOutlet weak var buttonSignin: UIButton!
    
    var presenter: SigninPresenterProtocol?

    // ENUM
    enum TFTag: Int {
        case email = 1, password = 2
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setupView()
        networkRequest()
    }
    override func viewWillAppear(_ animated: Bool) {
        self.setupNavigation()
    }
    @IBAction func actionForgot(_ sender: Any) {
        self.presenter?.showForgotPassword()
    }
    @IBAction func actionSignin(_ sender: Any) {
        self.presenter?.login()
       
    }
    @IBAction func actionPasswordHidden(_ sender: UIButton) {
        if sender.isSelected {
            textfieldPassword.isSecureTextEntry = true
            sender.isSelected = false
            buttonEye.setImage(UIImage(named: "icon_eye"), for: .normal)
        } else {
            textfieldPassword.isSecureTextEntry = false
            sender.isSelected = true
            buttonEye.setImage(UIImage(named: "icon_eye_hide"), for: .selected)        }
    }
}

extension SigninViewController: SetupViewController {
    func setupNavigation() {
        self.setStatusBarColor(color: .clear)
        self.navigationController?.setNavigationBarHidden(true, animated: false)
    }
    
    func setupView() {
//        self.textfieldEmail.text = "syedkashancs305+1@gmail.com"
//        self.textfieldPassword.text = "123456"
//        self.presenter?.password = "123456"
//        self.presenter?.username = "syedkashancs305+1@gmail.com"
        buttonForgotPassword.setAttributedTitle(DJM.shared.getValue(view: "signin_view", variable: "forgot_password").styled(as: .gibsonRegular_12sp), for: .normal)
        buttonSignin.setAttributedTitle(DJM.shared.getValue(view: "signin_view", variable: "sign_in").styled(as: .helveticaRegular_20sp), for: .normal)
        setUserNameTF()
        setPasswordTF()
        registerTFDelegate()
        buttonSignin.roundCorners(6)
        giveBtnCornerRadiusWithTheDarkBackGround(view: viewButton, btn: buttonSignin)
    }
    
    func networkRequest() {
    }
}

extension SigninViewController: SigninViewProtocol {
    
    func setUserNameTF() {
        self.setUpTF(tf: textfieldEmail, placeholder: DJM.shared.getValue(view: "signin_view", variable: "email_placeholder"), tag: .email)
        textfieldEmail.keyboardType = .emailAddress
    }
    
    func setPasswordTF() {
        self.setUpTF(tf: textfieldPassword, placeholder: DJM.shared.getValue(view: "signin_view", variable: "password_placeholder"), tag: .password)
    }
    func setUpTF(tf: UITextField, placeholder: String, tag: TFTag) {
        tf.attributedPlaceholder = placeholder.styled(as: .gibsonRegular_15sp_placeholder)
        tf.tag = tag.rawValue
        tf.delegate = self
    }
    func showLoader() {
        DispatchQueue.main.async {
            self.showLoadingIndicator()
        }
    }
    
    func hideLoader() {
        DispatchQueue.main.async {
            self.hideLoadingIndicator()
        }
    }
    
    func setEmailStatus(error: TfError, status: TFStatus) {
        self.textfieldEmail.errorMessage = error.localizedDescription
    }
    
    func setPasswordStatus(error: TfError, status: TFStatus) {
        self.textfieldPassword.errorMessage = error.localizedDescription
    }
    
    func registerTFDelegate() {
        self.textfieldEmail.addTarget(self, action: #selector(textFieldDidChange(_:)), for: .editingChanged)
        self.textfieldPassword.addTarget(self, action: #selector(textFieldDidChange(_:)), for: .editingChanged)
    }
    
}

// MARK: TEXT FIELD DELEGATE HANDLING
extension SigninViewController: UITextFieldDelegate {
    @objc func textFieldDidChange(_ textField: UITextField) {
        guard let type = TFTag(rawValue: textField.tag) else { return }
        let text = textField.text
        switch type {
        case .email:
            self.presenter?.set(username: text )
        case .password:
            self.presenter?.set(password: text)
        }
    }
    func textFieldShouldReturn(_ textField: UITextField) -> Bool {
        textField.resignFirstResponder()
        return true
    }
}
