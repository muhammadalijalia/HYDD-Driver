//
//  SigninPresenter.swift
//  Hydd
//
//  Created Syed Kashan on 05/01/2020.
//  Copyright Â© 2020 Syed Kashan. All rights reserved.
//
//  Template generated by Syed Kashan
//

import UIKit

class SigninPresenter: SigninPresenterProtocol, SigninInteractorOutputProtocol {

    var username: String?
    var password: String?
    
    weak private var view: SigninViewProtocol?
    var interactor: SigninInteractorInputProtocol?
    private let router: SigninWireframeProtocol

    init(interface: SigninViewProtocol, interactor: SigninInteractorInputProtocol?, router: SigninWireframeProtocol) {
        self.view = interface
        self.interactor = interactor
        self.router = router
    }

    func login() {
        let (email, isValidEmail) = self.validateEmail()
        let (password, isValidPassword) = self.validatePassword()
        if isValidEmail && isValidPassword {
            self.view?.showLoader()
            HUM.shared.getToken { isSuccess in
                if isSuccess {
                    self.interactor?.login(email: email, password: password)
                } else {
                    self.view?.hideLoader()
                    HMM.shared.showError(title: DJM.shared.getValue(view: "signin_view", variable: "error"), message: DJM.shared.getValue(view: "signin_view", variable: "went_wrong"))
                }
            }
        }
    }
    func goBack() {
        self.router.goBack()
    }
}

//Validations
extension SigninPresenter {
    func validateEmail()  -> (String, Bool) {
        
        guard let email = self.username else {
            view?.setEmailStatus(error: TfError.emptyEmail, status: .empty)
            return ("", false)
        }
        
        let isEmailValid = email.isValidEmail
        
        isEmailValid ?
            view?.setEmailStatus(error: TfError.none, status: .success) :
            view?.setEmailStatus(error: TfError.invalidEmail, status: .error)
        
        return (email, isEmailValid)
    }
    func validatePassword() -> (String, Bool) {
        
        guard let password = self.password else {
            view?.setPasswordStatus(error: TfError.emptyPassword, status: .empty)
            return ("", false)
        }
        let isPasswordValid = password.isValidPassword
        
        isPasswordValid ?
            view?.setPasswordStatus(error: TfError.none, status: .success):
            view?.setPasswordStatus(error: TfError.emptyPassword, status: .empty)
        
        return (password, isPasswordValid)
        
    }
}

//Data Setup
extension SigninPresenter {
    func set(username: String?) {
        self.username = username
    }
    func set(password: String?) {
        self.password = password
    }
}

extension SigninPresenter {
    func showForgotPassword() {
        self.router.showForgotPassword()
    }
    
    func showSignup() {
        self.router.showSignUp()
    }

    func successLogin() {
        DispatchQueue.main.async {
            self.view?.hideLoader()
            self.router.showSignUp()
        }
    }
    func failedLogin() {
        DispatchQueue.main.async {
            self.view?.hideLoader()
        }
    }
}
