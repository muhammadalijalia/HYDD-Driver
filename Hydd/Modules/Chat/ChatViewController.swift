//
//  ChatViewController.swift
//  HYDD-driver
//
//  Created Macbook Pro on 21/03/2020.
//  Copyright Â© 2020 Syed Kashan. All rights reserved.
//
//  Template generated by Syed Kashan
//

import UIKit
import IQKeyboardManager
import Firebase
import FirebaseDatabase
import GoogleMaps
import AVFoundation

class ChatViewController: BaseViewController, ChatViewProtocol {
    
    @IBOutlet weak var viewTextBox: RoundShadowView!
    @IBOutlet weak var buttonMic: UIButton!
    @IBOutlet weak var textMessage: UITextView!
    @IBOutlet weak var labelName: UILabel!
    @IBOutlet weak var tableViewChat: UITableView!
    @IBOutlet var constentViewBottom: NSLayoutConstraint?
    @IBOutlet weak var tvMessageConstant: NSLayoutConstraint!
    
    var audioRecorder: AVAudioRecorder?
    var recordingSession: AVAudioSession?
    
    var messages: [ChatModel] = [ChatModel]()
    var isFromView: ScreenType?
    var clientId: Int?
    var clientName: String?
    var clientImage: String?
    
    var presenter: ChatPresenterProtocol?
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setupView()
        textMessage.text = DJM.shared.getValue(view: "chat_view", variable: "say_somthing")
        NotificationCenter.default.addObserver(self, selector: #selector(onKeyboardAppear(_:)), name: UIResponder.keyboardWillChangeFrameNotification, object: nil)
        
    }
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        setupNavigation()
        self.navigationController?.tabBarController?.tabBar.isHidden = true
        guard let screen = self.isFromView,
            let idClient = self.clientId else {return}
        switch screen {
        case .chatList:
            guard let id = HUM.shared.user?.id else {return}
            APPCONSTANT.Chats.databaseChats.child("Chat_\(id)/\(idClient)").observe(.childAdded) { (snapshot) in
                if let data = snapshot.value as? [String: Any] {
                    if let messageData = ChatModel(JSON: data) {
                        self.messages.append(messageData)
                        self.tableViewChat.reloadData()
                        if self.messages.last?.isActive == 0 {
                            self.viewTextBox.isHidden = false
                        } else {
                            self.viewTextBox.isHidden = false
                        }
                        self.tableViewChat.tableViewScrollToBottom(animated: true)
                    }
                }
            }
        case .map:
            guard let id = HUM.shared.user?.id,
                let client = HDCM.shared.clientUserDetails else {return}
            APPCONSTANT.Chats.databaseChats.child("Chat_\(id)/\(client.userId)").observe(.childAdded) { (snapshot) in
                if let data = snapshot.value as? [String: Any] {
                    if let messageData = ChatModel(JSON: data) {
                        self.messages.append(messageData)
                        if self.messages.last?.isActive == 0 {
                            self.viewTextBox.isHidden = true
                        } else {
                            self.viewTextBox.isHidden = false
                        }
                        self.tableViewChat.reloadData()
                        self.tableViewChat.tableViewScrollToBottom(animated: true)
                    }
                }
            }
        case .pushNotification:
            guard let id = HUM.shared.user?.id else {return}
            APPCONSTANT.Chats.databaseChats.child("Chat_\(id)/\(idClient)").observe(.childAdded) { (snapshot) in
                if let data = snapshot.value as? [String: Any] {
                    if let messageData = ChatModel(JSON: data) {
                        self.messages.append(messageData)
                        if self.messages.last?.isActive == 0 {
                            self.viewTextBox.isHidden = true
                        } else {
                            self.viewTextBox.isHidden = false
                        }
                        self.tableViewChat.reloadData()
                        self.tableViewChat.tableViewScrollToBottom(animated: true)
                    }
                }
            }
        }
    }
    override func viewWillDisappear(_ animated: Bool) {
        super.viewWillDisappear(animated)
        self.navigationController?.tabBarController?.tabBar.isHidden = false
    }
    
    @IBAction func actionAdd(_ sender: Any) {
        guard let screen = self.isFromView else {return}
        switch screen {
        case .chatList, .pushNotification:
            sendMapChatlist()
        case .map:
            sendMapNavigation()
        }
    }
    @IBAction func actionInfo(_ sender: Any) {
    }
    
    @IBAction func goBack(_ sender: Any) {
        guard let screen = self.isFromView else {return}
        switch screen {
        case .chatList, .pushNotification:
            self.presenter?.goBack()
        case .map:
            self.dismiss(animated: true, completion: nil)
        }
        
    }
    @IBAction func actionSendMessage(_ sender: Any) {
        guard let screen = self.isFromView else {return}
        switch screen {
        case .chatList, .pushNotification:
            sendTextChatList()
        case .map:
            sendTextNavigation()
        }
    }
    
    func sendMapChatlist() {
        guard let idClient = self.clientId,
            let name = self.clientName,
            let image = self.clientImage else {return}
        
        let alert = UIAlertController(title: "", message: DJM.shared.getValue(view: "chat_view", variable: "select_option"), preferredStyle: .actionSheet)
        alert.addAction(UIAlertAction(title: DJM.shared.getValue(view: "chat_view", variable: "location"), style: .default , handler:{ (UIAlertAction)in
            guard let id = HUM.shared.user?.id else {return}
            let date = Date.timeIntervalSinceReferenceDate
            let (lat, long) = HLM.shared.getForLatLong()
            let para = ["driverImage": HUM.shared.user?.userImage as Any,
                        "driverId": HUM.shared.user?.id as Any,
                        "driverName": "\(HUM.shared.user?.fName ?? "") \(HUM.shared.user?.LName ?? "")",
                "userImage": "\(image)",
                "userId": idClient,
                "userName": "\(name)",
                "is_driver": 1,
                "message": "Current location",
                "is_map": 1,
                "timestamp": date,
                "lat": lat,
                "lng": long,
                "is_audio": 0,
                "is_active": 1] as [String: Any]
            APPCONSTANT.Chats.databaseChats.child("Chat_\(id)/\(idClient)").childByAutoId().setValue(para)
            APPCONSTANT.Chats.databaseChats.child("Chat_\(idClient)/\(id)").childByAutoId().setValue(para)
            let pnPara = [  "message": "My current location",
                            "driver_id": HUM.shared.user?.id as Any,
                            "user_id": idClient,
                            "driver_name": "\(HUM.shared.user?.fName ?? "") \(HUM.shared.user?.LName ?? "")",
                "client_name": "\(name)",
                "user": "driver",
                "driver_image": HUM.shared.user?.userImage as Any,
                "client_image": "\(image)"]
            self.sendNotification(para: pnPara)
        }))
        alert.addAction(UIAlertAction(title: DJM.shared.getValue(view: "chat_view", variable: "dismiss"), style: .cancel, handler:{ (UIAlertAction)in
            print("User click Dismiss button")
        }))
        self.present(alert, animated: true, completion: {
            print("completion block")
        })
    }
    func sendMapNavigation() {
        let alert = UIAlertController(title: "", message: DJM.shared.getValue(view: "chat_view", variable: "select_option"), preferredStyle: .actionSheet)
        alert.addAction(UIAlertAction(title: DJM.shared.getValue(view: "chat_view", variable: "location"), style: .default , handler:{ (UIAlertAction)in
            guard let id = HUM.shared.user?.id,
                let client = HDCM.shared.clientUserDetails else {return}
            let date = Date.timeIntervalSinceReferenceDate
            let (lat, long) = HLM.shared.getForLatLong()
            let para = ["driverImage": HUM.shared.user?.userImage as Any,
                        "driverId": HUM.shared.user?.id as Any,
                        "driverName": "\(HUM.shared.user?.fName ?? "") \(HUM.shared.user?.LName ?? "")",
                "userImage": "https://staging.hydd.caansoft.com/media/\(client.userImage)",
                "userId": client.userId,
                "userName": "\(client.firstName) \(client.lastName)",
                "is_driver": 1,
                "message": "Current location",
                "is_map": 1,
                "timestamp": date,
                "lat": lat,
                "lng": long,
                "is_audio": 0,
                "is_active": 1] as [String: Any]
            APPCONSTANT.Chats.databaseChats.child("Chat_\(id)/\(client.userId)").childByAutoId().setValue(para)
            APPCONSTANT.Chats.databaseChats.child("Chat_\(client.userId)/\(id)").childByAutoId().setValue(para)
            let pnPara = [  "message": "My current location",
                            "driver_id": HUM.shared.user?.id as Any,
                            "user_id": client.userId,
                            "driver_name": "\(HUM.shared.user?.fName ?? "") \(HUM.shared.user?.LName ?? "")",
                "client_name": "\(client.firstName) \(client.lastName)",
                "user": "driver",
                "driver_image": HUM.shared.user?.userImage as Any,
                "client_image": "https://staging.hydd.caansoft.com/media/\(client.userImage)"]
            self.sendNotification(para: pnPara)
        }))
        alert.addAction(UIAlertAction(title: DJM.shared.getValue(view: "chat_view", variable: "dismiss"), style: .cancel, handler:{ (UIAlertAction)in
            print("User click Dismiss button")
        }))
        self.present(alert, animated: true, completion: {
            print("completion block")
        })
    }
    
    func sendTextChatList() {
        guard let idClient = self.clientId,
            let name = self.clientName,
            let image = self.clientImage else {return}
        
        guard let text = textMessage.text,
            let id = HUM.shared.user?.id else {return}
        let date = Date.timeIntervalSinceReferenceDate
        print(date)
        if text != "" {
            let para = ["driverImage": HUM.shared.user?.userImage as Any,
                        "driverId": HUM.shared.user?.id as Any,
                        "driverName": "\(HUM.shared.user?.fName ?? "") \(HUM.shared.user?.LName ?? "")",
                "userImage": "\(image)",
                "userId": idClient,
                "userName": "\(name)",
                "is_driver": 1,
                "message": text,
                "is_map": 0,
                "timestamp": date,
                "lat": 0,
                "lng": 0,
                "is_audio": 0,
                "is_active": 1] as [String: Any]
            APPCONSTANT.Chats.databaseChats.child("Chat_\(id)/\(idClient)").childByAutoId().setValue(para)
            APPCONSTANT.Chats.databaseChats.child("Chat_\(idClient)/\(id)").childByAutoId().setValue(para)
            let pnPara = [  "message": text,
                            "driver_id": HUM.shared.user?.id as Any,
                            "user_id": idClient,
                            "driver_name": "\(HUM.shared.user?.fName ?? "") \(HUM.shared.user?.LName ?? "")",
                "client_name": "\(name)",
                "user": "driver",
                "driver_image": HUM.shared.user?.userImage as Any,
                "client_image": "\(image)"]
            sendNotification(para: pnPara)
            textMessage.text = nil
            self.tvMessageConstant.constant = 40
        }
    }
    func sendTextNavigation() {
        guard let text = textMessage.text,
            let id = HUM.shared.user?.id,
            let client = HDCM.shared.clientUserDetails else {return}
        let date = Date.timeIntervalSinceReferenceDate
        if text != "" {
            let para = ["driverImage": HUM.shared.user?.userImage as Any,
                        "driverId": HUM.shared.user?.id as Any,
                        "driverName": "\(HUM.shared.user?.fName ?? "") \(HUM.shared.user?.LName ?? "")",
                "userImage": "https://staging.hydd.caansoft.com/media/\(client.userImage)",
                "userId": client.userId,
                "userName": "\(client.firstName) \(client.lastName)",
                "is_driver": 1,
                "message": text,
                "is_map": 0,
                "timestamp": date,
                "lat": 0,
                "lng": 0,
                "is_audio": 0,
                "is_active": 1] as [String: Any]
            APPCONSTANT.Chats.databaseChats.child("Chat_\(id)/\(client.userId)").childByAutoId().setValue(para)
            APPCONSTANT.Chats.databaseChats.child("Chat_\(client.userId)/\(id)").childByAutoId().setValue(para)
            let pnPara = ["message": text,
                          "driver_id": HUM.shared.user?.id as Any,
                          "user_id": client.userId,
                          "driver_name": "\(HUM.shared.user?.fName ?? "") \(HUM.shared.user?.LName ?? "")",
                "client_name": "\(client.firstName) \(client.lastName)",
                "user": "driver",
                "driver_image": HUM.shared.user?.userImage as Any,
                "client_image": "https://staging.hydd.caansoft.com/media/\(client.userImage)"]
            sendNotification(para: pnPara)
            textMessage.text = nil
            self.tvMessageConstant.constant = 40
        }
    }
    
    func sendAudioChatList(url: String) {
        guard let idClient = self.clientId,
            let name = self.clientName,
            let image = self.clientImage else {return}
        
        guard let id = HUM.shared.user?.id else {return}
        let date = Date.timeIntervalSinceReferenceDate
        print(date)
        let para = ["driverImage": HUM.shared.user?.userImage as Any,
                    "driverId": HUM.shared.user?.id as Any,
                    "driverName": "\(HUM.shared.user?.fName ?? "") \(HUM.shared.user?.LName ?? "")",
            "userImage": "\(image)",
            "userId": idClient,
            "userName": "\(name)",
            "is_driver": 1,
            "message": "Audio",
            "is_map": 0,
            "timestamp": date,
            "lat": 0,
            "lng": 0,
            "is_audio": 1,
            "audio_url": url,
            "is_active": 1] as [String: Any]
        print(para)
        APPCONSTANT.Chats.databaseChats.child("Chat_\(id)/\(idClient)").childByAutoId().setValue(para)
        APPCONSTANT.Chats.databaseChats.child("Chat_\(idClient)/\(id)").childByAutoId().setValue(para)
        let pnPara = [  "message": "Audio",
                        "driver_id": HUM.shared.user?.id as Any,
                        "user_id": idClient,
                        "driver_name": "\(HUM.shared.user?.fName ?? "") \(HUM.shared.user?.LName ?? "")",
            "client_name": "\(name)",
            "user": "driver",
            "driver_image": HUM.shared.user?.userImage as Any,
            "client_image": "\(image)"]
        sendNotification(para: pnPara)
    }
    func sendAudioNavigation(url: String) {
        guard let id = HUM.shared.user?.id,
            let client = HDCM.shared.clientUserDetails else {return}
        let date = Date.timeIntervalSinceReferenceDate
        let para = ["driverImage": HUM.shared.user?.userImage as Any,
                    "driverId": HUM.shared.user?.id as Any,
                    "driverName": "\(HUM.shared.user?.fName ?? "") \(HUM.shared.user?.LName ?? "")",
            "userImage": "https://staging.hydd.caansoft.com/media/\(client.userImage)",
            "userId": client.userId,
            "userName": "\(client.firstName) \(client.lastName)",
            "is_driver": 1,
            "message": "Audio",
            "is_map": 0,
            "timestamp": date,
            "lat": 0,
            "lng": 0,
            "is_audio": 1,
            "audio_url": url,
            "is_active": 1] as [String: Any]
        APPCONSTANT.Chats.databaseChats.child("Chat_\(id)/\(client.userId)").childByAutoId().setValue(para)
        APPCONSTANT.Chats.databaseChats.child("Chat_\(client.userId)/\(id)").childByAutoId().setValue(para)
        let pnPara = ["message": "Audio",
                      "driver_id": HUM.shared.user?.id as Any,
                      "user_id": client.userId,
                      "driver_name": "\(HUM.shared.user?.fName ?? "") \(HUM.shared.user?.LName ?? "")",
            "client_name": "\(client.firstName) \(client.lastName)",
            "user": "driver",
            "driver_image": HUM.shared.user?.userImage as Any,
            "client_image": "https://staging.hydd.caansoft.com/media/\(client.userImage)"]
        sendNotification(para: pnPara)
    }
    
    func sendNotification(para: [String: Any]) {
        self.presenter?.sendNotification(para: para)
    }
}

extension ChatViewController: SetupViewController {
    
    func setupNavigation() {
        guard let screen = self.isFromView else {return}
        switch screen {
        case .chatList, .pushNotification:
            self.setNavigationWithLogoAndBackButton().addTarget(self, action: #selector(goBack), for: .touchUpInside)
        case .map:
            self.setNavigationWithLogoAndCrossButton().addTarget(self, action: #selector(goBack), for: .touchUpInside)
        }
        
    }
    func setupView() {
        switch recordingSession?.recordPermission ?? .undetermined {
        case .undetermined:
            checkForPermission()
        case .denied:
            checkForPermission()
        case .granted:
            break
        @unknown default:
            break
        }
        guard let screen = self.isFromView,
            let name = self.clientName else {return}
        switch screen {
        case .chatList, .pushNotification:
            labelName.attributedText = "\(name)".styled(as: .gibsonRegular_30sp)
        case .map:
            guard let client = HDCM.shared.clientUserDetails else {return}
            labelName.attributedText = "\(client.firstName) \(client.lastName)".styled(as: .gibsonRegular_30sp)
        }
        IQKeyboardManager.shared().isEnabled = false
        tableViewChat.dataSource = self
        tableViewChat.register(UINib(nibName: "ReceiverVoiceTableViewCell", bundle: nil), forCellReuseIdentifier: "ReceiverVoiceTableViewCell")
        tableViewChat.register(UINib(nibName: "ReceiverTableViewCell", bundle: nil), forCellReuseIdentifier: "ReceiverTableViewCell")
        tableViewChat.register(UINib(nibName: "SenderVoiceTableViewCell", bundle: nil), forCellReuseIdentifier: "SenderVoiceTableViewCell")
        tableViewChat.register(UINib(nibName: "SenderTableViewCell", bundle: nil), forCellReuseIdentifier: "SenderTableViewCell")
        tableViewChat.register(UINib(nibName: "MapTableViewCell", bundle: nil), forCellReuseIdentifier: "MapTableViewCell")
        textMessage.textContainerInset = UIEdgeInsets(top: 0,left: 0,bottom: 0,right: 140)
        textMessage.tintColor = .hyddblue
        textMessage.autocorrectionType = .yes
        textMessage.roundCorners(12)
        textMessage.delegate = self
        let longPressRecognizer = UILongPressGestureRecognizer(target: self, action: #selector(micPressed(_:)))
        buttonMic.addGestureRecognizer(longPressRecognizer)
        addSendButton()
    }
    func networkRequest() {
        
    }
    func checkForPermission() {
        recordingSession = AVAudioSession.sharedInstance()
        do {
            recordingSession?.requestRecordPermission() { allowed in
                DispatchQueue.main.async {
                    if allowed {
                        
                    }
                }
            }
        }
    }
    
    func addSendButton() {
        let keyboardToolbar = UIToolbar()
        keyboardToolbar.sizeToFit()
        let flexBarButton = UIBarButtonItem(barButtonSystemItem: .flexibleSpace,
                                            target: nil, action: nil)
        let doneBarButton = UIBarButtonItem(title: DJM.shared.getValue(view: "chat_view", variable: "send"), style: .plain, target: self, action: #selector(actionSendMessage))
        doneBarButton.setTitleTextAttributes(
            [   NSAttributedString.Key.font: UIFont(name: "Gibson-Regular", size: 20)!,
                NSAttributedString.Key.foregroundColor: UIColor.hyddblue
        ], for: .normal)
        doneBarButton.setTitleTextAttributes(
            [   NSAttributedString.Key.font: UIFont(name: "Gibson-Regular", size: 18)!,
                NSAttributedString.Key.foregroundColor: UIColor.hyddblue
        ], for: .selected)
        keyboardToolbar.items = [flexBarButton, doneBarButton]
        textMessage.inputAccessoryView = keyboardToolbar
    }
    func setView(id: Int, image: String, username: String, viewType: ScreenType ) {
        self.isFromView = viewType
        self.clientName = username
        self.clientImage = image
        self.clientId = id
    }
    
    @objc func onKeyboardAppear(_ notification: NSNotification) {
        let info = notification.userInfo!
        
        let endFrame = (info[UIResponder.keyboardFrameEndUserInfoKey] as? NSValue)?.cgRectValue
        let endFrameY = endFrame?.origin.y ?? 0
        let duration: TimeInterval = (info[UIResponder.keyboardAnimationDurationUserInfoKey] as? NSNumber)?.doubleValue ?? 0
        let animationCurveRawNSN = info[UIResponder.keyboardAnimationCurveUserInfoKey] as? NSNumber
        let animationCurveRaw = animationCurveRawNSN?.uintValue ?? UIView.AnimationOptions.curveEaseInOut.rawValue
        let animationCurve: UIView.AnimationOptions = UIView.AnimationOptions(rawValue: animationCurveRaw)
        if endFrameY >= UIScreen.main.bounds.size.height {
            self.constentViewBottom?.constant = 10.0
        } else {
            self.constentViewBottom?.constant = CGFloat(10) + (endFrame?.size.height ?? 0.0)
        }
        UIView.animate(withDuration: duration,
                       delay: TimeInterval(0),
                       options: animationCurve,
                       animations: { DispatchQueue.main.async {
                        self.view.layoutIfNeeded()}},
                       completion: nil)
    }
}

extension ChatViewController: UITableViewDataSource, MapTableViewCellDelegate {
    func gotoMap(index: Int) {
        if self.messages[index].isMap.boolValue {
            let lat = messages[index].lat
            let long = messages[index].long
            if (UIApplication.shared.canOpenURL(NSURL(string:"comgooglemaps://")! as URL)) {
                UIApplication.shared.open(NSURL(string:
                    "comgooglemaps://?saddr=&daddr=\(lat),\(long)&directionsmode=driving")! as URL)
            } else {
                UIApplication.shared.open(URL(string: "http://maps.google.com/maps?q=loc:\(lat),\(long)&directionsmode=driving")!, options: [:], completionHandler: nil)
            }
        }
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return messages.count
    }
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let data = messages[indexPath.row]
        if data.isDriver.boolValue {
            if data.isMap.boolValue {
                guard let cell = tableViewChat.dequeueReusableCell(withIdentifier: "MapTableViewCell") as? MapTableViewCell else {return UITableViewCell()}
                cell.coordinates = CLLocationCoordinate2D(latitude: data.lat, longitude: data.long)
                cell.configureCell(object: "")
                cell.index = indexPath.row
                cell.delegate = self
                cell.labelTime.attributedText = getDateConverted(time: data.timestamp).styled(as: .gibsonRegular_12sp_grey)
                cell.viewMap.roundCorners(12)
                return cell
            } else if data.isAudio.boolValue {
                guard let cell = tableViewChat.dequeueReusableCell(withIdentifier: "SenderVoiceTableViewCell") as? SenderVoiceTableViewCell else {return UITableViewCell()}
                cell.viewMessage.roundCorners(12)
                cell.labelTime.attributedText = getDateConverted(time: data.timestamp).styled(as: .gibsonRegular_12sp_grey)
                cell.configureCell(object: data)
                return cell
            } else {
                guard let cell = tableViewChat.dequeueReusableCell(withIdentifier: "SenderTableViewCell") as? SenderTableViewCell else {return UITableViewCell()}
                cell.labelMessage.text = data.message
                cell.viewMessage.roundCorners(12)
                cell.labelTime.attributedText = getDateConverted(time: data.timestamp).styled(as: .gibsonRegular_12sp_grey)
                return cell
            }
        } else {
            if data.isMap.boolValue {
                guard let cell = tableViewChat.dequeueReusableCell(withIdentifier: "MapTableViewCell") as? MapTableViewCell else {return UITableViewCell()}
                cell.coordinates = CLLocationCoordinate2D(latitude: data.lat, longitude: data.long)
                cell.configureCell(object: "")
                cell.index = indexPath.row
                cell.delegate = self
                cell.labelTime.attributedText = getDateConverted(time: data.timestamp).styled(as: .gibsonRegular_12sp_grey)
                cell.viewMap.roundCorners(12)
                return cell
            } else if data.isAudio.boolValue {
                guard let cell = tableViewChat.dequeueReusableCell(withIdentifier: "ReceiverVoiceTableViewCell") as? ReceiverVoiceTableViewCell else {return UITableViewCell()}
                cell.viewMessage.roundCorners(12)
                cell.labelTime.attributedText = getDateConverted(time: data.timestamp).styled(as: .gibsonRegular_12sp_grey)
                cell.configureCell(object: data)
                return cell
            } else {
                guard let cell = tableViewChat.dequeueReusableCell(withIdentifier: "ReceiverTableViewCell") as? ReceiverTableViewCell else {return UITableViewCell()}
                cell.labelMessage.text = data.message
                cell.labelTime.attributedText = getDateConverted(time: data.timestamp).styled(as: .gibsonRegular_12sp_grey)
                cell.viewMessage.roundCorners(12)
                return cell
            }
        }
    }
    
    func getDateConverted(time: Double) -> String {
        var date = NSDate()
        if time.truncatingRemainder(dividingBy: 1) == 0{
            date = NSDate(timeIntervalSince1970: time/1000)
        }
        else{
            date = NSDate(timeIntervalSinceReferenceDate: time)
        }
        let dateFormatter = DateFormatter()
        dateFormatter.locale = Locale.init(identifier: "fr")
        dateFormatter.timeStyle = DateFormatter.Style.short//Set time style
        dateFormatter.dateStyle = DateFormatter.Style.medium //Set date style
        dateFormatter.timeZone = .current
        return dateFormatter.string(from: date as Date)
    }
}

extension ChatViewController: UITextViewDelegate {
    
    func textViewDidBeginEditing(_ textView: UITextView) {
        textView.text = nil
    }
    func textViewDidEndEditing(_ textView: UITextView) {
        textView.text = DJM.shared.getValue(view: "chat_view", variable: "say_somthing")
    }
}

extension ChatViewController: AVAudioRecorderDelegate {
    @objc func micPressed(_ recognizer: UILongPressGestureRecognizer) {
        switch recognizer.state {
        case .possible:
            print("possible")
        case .began:
            print("began")
            HSM.make.sound(.success)
            buttonMic.addPulsAnimation()
            DispatchQueue.main.asyncAfter(deadline: .now() + 0.8) {
                self.startRecording()
            }
            buttonMic.setImage(UIImage(named: "icon_mic_selected"), for: .normal)
        case .changed:
            buttonMic.setImage(UIImage(named: "icon_mic_selected"), for: .normal)
        case .ended:
            print("ended")
            finishRecording(success: true)
            buttonMic.layer.removeAllAnimations()
            HSM.make.sound(.error)
            buttonMic.setImage(UIImage(named: "icon_mic"), for: .normal)
        case .cancelled:
            print("cancelled")
        case .failed:
            print("failed")
        @unknown default:
            break
        }
    }
    func startRecording() {
        let settings = [
            AVFormatIDKey: Int(kAudioFormatMPEG4AAC),
            AVSampleRateKey: 12000,
            AVNumberOfChannelsKey: 1,
            AVEncoderAudioQualityKey: AVAudioQuality.high.rawValue
        ]
        
        do {
            try recordingSession?.setCategory(.playAndRecord, mode: .voiceChat)
            try recordingSession?.setActive(true)
            let audioFileUrl = getAudiFileURL()
            print(audioFileUrl)
            audioRecorder = try AVAudioRecorder(url: audioFileUrl, settings: settings)
            audioRecorder?.delegate = self
            audioRecorder?.record()
        } catch {
            finishRecording(success: false)
        }
    }
    func getDocumentsDirectory() -> URL {
        let paths = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask)
        let documentDir = paths[0]
        return documentDir
    }
    func getAudiFileURL() -> URL {
        return getDocumentsDirectory().appendingPathComponent(".caf")
    }
    func finishRecording(success: Bool) {
        audioRecorder?.stop()
        audioRecorder = nil
        if success {
            let url = getAudiFileURL()
            
            let outputUrl = getDocumentsDirectory().appendingPathComponent("audiosound.mp4")
            let asset = AVAsset.init(url: url)
            let exportSession = AVAssetExportSession.init(asset: asset, presetName: AVAssetExportPresetHighestQuality)
            
            do {
                try FileManager.default.removeItem(at: outputUrl)
            } catch let error as NSError {
                print(error.localizedDescription)
            }
            
            
            exportSession?.outputFileType = AVFileType.mp4
            
            exportSession?.outputURL = outputUrl
            
            exportSession?.metadata = asset.metadata
            
            exportSession?.exportAsynchronously(completionHandler: {
                if (exportSession?.error != nil) {
                    print ("Error is \(String(describing: exportSession?.error?.localizedDescription))")
                }
                else if (exportSession?.status == .completed)
                {
                    print("AV export succeeded.")
                    
                    // outputUrl to post Audio on server
                    let fileName = NSUUID().uuidString + ".mp4"
                    let metadata = StorageMetadata()
                    metadata.contentType = "video/mp4"
                    APPCONSTANT.Chats.storageChat.child(fileName).putFile(from: outputUrl, metadata: metadata) { (metadata, error) in
                        guard let _ = metadata else {
                            print(DJM.shared.getValue(view: "chat_view", variable: "error") + "\(String(describing: error))")
                            return
                        }
                        APPCONSTANT.Chats.storageChat.child(fileName).downloadURL { (url, error) in
                            guard let screen = self.isFromView,
                                let url = url?.absoluteString else {return}
                            switch screen {
                            case .chatList, .pushNotification:
                                self.sendAudioChatList(url: url)
                            case .map:
                                self.sendAudioNavigation(url: url)
                            }
                        }
                    }

                   }
                   else if (exportSession?.status == .cancelled)
                   {
                       print("AV export cancelled.")
                   }
               })
            
        }
    }
    func audioRecorderDidFinishRecording(_ recorder: AVAudioRecorder, successfully flag: Bool) {
        if !flag {
            finishRecording(success: false)
        }
    }
}
