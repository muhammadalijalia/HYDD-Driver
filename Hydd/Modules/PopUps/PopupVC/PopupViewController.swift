//
//  PopupViewController.swift
//  HYDD-driver
//
//  Created Syed Kashan on 24/02/2020.
//  Copyright Â© 2020 Syed Kashan. All rights reserved.
//
//  Template generated by Syed Kashan
//

import UIKit

protocol RegisterPopUpDelegate: class {
    func actionRegisterCar()
}

protocol CancelJobPopUpProtocol: class {
    func actionCancelJob()
}

protocol StartJobPopUpDelegate: class {
    func actionOk(car: String)
}

protocol AcceptJobPopProtocol: class {
    func actionAcceptJob(car: MyCarDetailModel)
}

enum PopUpType {
    case Accept, RegisterVehicle, StartJob, CancelJob
}
class PopupViewController: UIViewController {
    // MARK: - Outlet
    
    @IBOutlet weak var stackView: UIStackView!
    //------------------------------------------------------
    
    // MARK: Delegates
    weak var acceptDelegate: AcceptJobPopProtocol?
    weak var startDelegate: StartJobPopUpDelegate?
    weak var cancelJobDelegate: CancelJobPopUpProtocol?
    weak var registerCarDelegate: RegisterPopUpDelegate?
    
    // MARK: - Class Variable
    let vwAccept: AcceptJobPopup = UIView.fromNib()
    let vwRegister: NewVehiclePopup = UIView.fromNib()
    let vwStartJob: StartJobPopUp = UIView.fromNib()
    let vwCancelJob: CancelJobPopUp = UIView.fromNib()
    
    var type: PopUpType = .Accept
    var time = 1
    var timer = Timer()
    var classVehicle: String = ""
    
    //------------------------------------------------------
    
    // MARK: - Memory Management Method
    
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    
    deinit {
        
    }
    //------------------------------------------------------
    
    // MARK: - Life Cycle Method
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setUpView()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        showAnimation(vwBase: getView())
    }
    
    override func viewWillDisappear(_ animated: Bool) {
        super.viewWillDisappear(animated)
    }
    
    //------------------------------------------------------
    
    // MARK: - Custom Method
    
    func setUpView() {
        
        switch type {
        case .Accept:
            vwAccept.setClass(vehicleClass: classVehicle)
            vwAccept.buttonConfirm.addAction(for: .touchUpInside) {
                guard let delegate = self.acceptDelegate,
                    let text = self.vwAccept.textFieldCar.text,
                    let car = self.vwAccept.car,
                    text.count > 0 else  {return}
                delegate.actionAcceptJob(car: car)
                self.dismiss(animated: true, completion: nil)
            }
        case .RegisterVehicle:
            vwRegister.setClass(classVehicle: classVehicle)
            vwRegister.buttonNo.addAction(for: .touchUpInside) {
                self.dismiss(animated: true, completion: nil)
            }
            vwRegister.buttonYes.addAction(for: .touchUpInside) {
                guard let delegate = self.registerCarDelegate else  {return}
                delegate.actionRegisterCar()
                self.dismiss(animated: true, completion: nil)
            }
        case .StartJob:
            vwStartJob.setClass(vehicleClass: classVehicle)
            vwStartJob.buttonNo.addAction(for: .touchUpInside) {
                self.dismiss(animated: true, completion: nil)
            }
            vwStartJob.buttonYes.addAction(for: .touchUpInside) {
                guard let delegate = self.startDelegate,
                    let text = self.vwStartJob.textFieldCar.text, text.count > 0 else  {return}
                delegate.actionOk(car: text)
                self.dismiss(animated: true, completion: nil)
            }
        case .CancelJob:
            vwCancelJob.buttonNo.addAction(for: .touchUpInside) {
                self.dismiss(animated: true, completion: nil)
            }
            vwCancelJob.buttonYes.addAction(for: .touchUpInside) {
                guard let delegate = self.cancelJobDelegate else {return}
                delegate.actionCancelJob()
                self.dismiss(animated: true, completion: nil)
            }
        }
        stackView.addArrangedSubview(self.getView())
    }
    
    @objc func dismissView() {
        if self.time == 2 {
            self.timer.invalidate()
            self.dismiss(vwBase: self.getView())
        }
        self.time += 1
    }
    func getView() -> UIView {
        switch type {
        case .Accept:
            return vwAccept
        case .RegisterVehicle:
            return vwRegister
        case .StartJob:
            return vwStartJob
        case .CancelJob:
            return vwCancelJob
        }
    }
    
    func showAnimation(vwBase: UIView) {
        
        vwBase.isHidden = false
        vwBase.alpha = 1.0
        vwBase.transform = CGAffineTransform(scaleX: 0.0, y: 0.0)
        UIView.animate(withDuration: 0.6, delay: 0.0, usingSpringWithDamping: 0.6, initialSpringVelocity: 0, options: [.curveEaseOut], animations: {
            vwBase.transform = CGAffineTransform(scaleX: 1, y: 1)
        }) { (_) in
        }
    }
    
    func dismiss(vwBase: UIView, completion: (() -> Void)? = nil) {
        
        UIView.animate(withDuration: 0.2, delay: 0.0, options: [.curveEaseIn], animations: {
            vwBase.transform = CGAffineTransform(scaleX: 0.1, y: 0.1)
            vwBase.alpha = 0.0
        }) { (_) in
            self.dismiss(animated: false, completion: completion)
        }
    }
    
    //------------------------------------------------------
    
    // MARK: - Action Method
    
    override func touchesBegan(_ touches: Set<UITouch>, with event: UIEvent?) {
        //self.dismiss(animated: true, completion: nil)
        dismiss(vwBase: getView())
    }
    
}
