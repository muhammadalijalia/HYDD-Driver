//
//  RatingsViewController.swift
//  HYDD-driver
//
//  Created Syed Kashan on 30/06/2020.
//  Copyright Â© 2020 Syed Kashan. All rights reserved.
//
//  Template generated by Syed Kashan
//

import UIKit

class RatingsViewController: UIViewController, RatingsViewProtocol {

    @IBOutlet weak var labelSatisfaction: UILabel!
    @IBOutlet weak var labelPunctualityPercentage: UILabel!
    @IBOutlet weak var sliderPunctuality: UISlider!
    @IBOutlet weak var labelPunctuality: UILabel!
    @IBOutlet weak var labelCourtesyPercentage: UILabel!
    @IBOutlet weak var sliderCourtesy: UISlider!
    @IBOutlet weak var labelCourtesy: UILabel!
    @IBOutlet weak var labelCommPercentage: UILabel!
    @IBOutlet weak var sliderCommunication: UISlider!
    @IBOutlet weak var labelCommunication: UILabel!
    @IBOutlet weak var labelOutOf: UILabel!
    @IBOutlet weak var labelRating: UILabel!
    @IBOutlet weak var labelDriverName: UILabel!
    @IBOutlet weak var imageDriver: UIImageView!
    var presenter: RatingsPresenterProtocol?

	override func viewDidLoad() {
        super.viewDidLoad()
        setupView()
        setupNavigation()
        networkRequest()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        self.navigationController?.tabBarController?.tabBar.isHidden = true
    }
    override func viewWillDisappear(_ animated: Bool) {
        super.viewWillDisappear(animated)
        self.navigationController?.tabBarController?.tabBar.isHidden = false
    }
    @IBAction func actionBack(_ sender: UIButton) {
        self.navigationController?.popViewController(animated: true)
    }

}

extension RatingsViewController: SetupViewController {
    func setupNavigation() {
        self.setNavigationWithLogoAndBackButton().addTarget(self, action: #selector(actionBack(_:)), for: .touchUpInside)
    }
    
    func setupView() {
        self.imageDriver.makeRoundedImage()
        DispatchQueue.main.async {
            guard let image = HUM.shared.user?.userImage, image.count > 5 else { return }
            ImageManager.shared.setImage(url: image, imageView: self.imageDriver)
        }
        guard let fName = HUM.shared.user?.fName,
        let lName = HUM.shared.user?.LName else {
            return
        }
        labelDriverName.attributedText = "\(fName) \(lName)".styled(as: .gibsonRegular_18sp)
        labelCommunication.attributedText =  DJM.shared.getValue(view: "my_ratings_view", variable: "comm").styled(as: .gibsonRegular_21sp)
        labelCourtesy.attributedText = DJM.shared.getValue(view: "my_ratings_view", variable: "court").styled(as: .gibsonRegular_21sp)
        labelPunctuality.attributedText = DJM.shared.getValue(view: "my_ratings_view", variable: "punct").styled(as: .gibsonRegular_21sp)
        labelSatisfaction.attributedText = "Statistics based on 0 customer reviews".styled(as: .gibsonRegular_15sp)
        labelRating.attributedText = "0.0".styled(as: .gibsonRegular_50sp)
        labelOutOf.attributedText = DJM.shared.getValue(view: "my_ratings_view", variable: "out").styled(as: .gibsonRegular_21sp)
        labelCommPercentage.attributedText = "0 %".styled(as: .gibsonRegular_15sp)
        labelCourtesyPercentage.attributedText = "0 %".styled(as: .gibsonRegular_15sp)
        labelPunctualityPercentage.attributedText = "0 %".styled(as: .gibsonRegular_15sp)
        sliderCommunication.setValue(0, animated: true)
        sliderCourtesy.setValue(0, animated: true)
        sliderPunctuality.setValue(0, animated: true)
//        sliderCourtesy.minimumTrackTintColor = .clear
        sliderCourtesy.maximumTrackTintColor = .clear
//        sliderPunctuality.minimumTrackTintColor = .clear
        sliderPunctuality.maximumTrackTintColor = .clear
//        sliderCommunication.minimumTrackTintColor = .clear
        sliderCommunication.maximumTrackTintColor = .clear
        DispatchQueue.main.async {
            self.sliderCommunication.transform = self.sliderCommunication.transform.scaledBy(x: 1, y: 2)
            self.sliderPunctuality.transform = self.sliderPunctuality.transform.scaledBy(x: 1, y: 2)
            self.sliderCourtesy.transform = self.sliderCourtesy.transform.scaledBy(x: 1, y: 2)
        }
        
    }
    
    func setData() {
        guard let rating = HUM.shared.driverRating else {return}
        labelRating.attributedText = "\(rating.averageRating.rounded(toPlaces: 1))".styled(as: .gibsonRegular_50sp)
        labelCommPercentage.attributedText = "\(rating.communication) %".styled(as: .gibsonRegular_15sp)
        labelCourtesyPercentage.attributedText = "\(rating.courtesy) %".styled(as: .gibsonRegular_15sp)
        labelPunctualityPercentage.attributedText = "\(rating.punctuality) %".styled(as: .gibsonRegular_15sp)
        labelSatisfaction.attributedText = (DJM.shared.getValue(view: "my_ratings_view", variable: "sat_1") +  "\(rating.ratingscount)" + DJM.shared.getValue(view: "my_ratings_view", variable: "sat_2")).styled(as: .gibsonRegular_15sp)
        sliderCommunication.setValue(Float(rating.communication), animated: true)
        sliderCourtesy.setValue(Float(rating.courtesy), animated: true)
        sliderPunctuality.setValue(Float(rating.punctuality), animated: true)
    }
    
    func networkRequest() {
        HUM.shared.driverRating { (isSuccess, message) in
            DispatchQueue.main.async {
                if isSuccess {
                    self.setData()
                } else {
                    self.actionBack(UIButton())
                }
            }
        }
    }
}
