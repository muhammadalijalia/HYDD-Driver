//
//  JobListingViewController.swift
//  HYDD-driver
//
//  Created Syed Kashan on 26/01/2020.
//  Copyright Â© 2020 Syed Kashan. All rights reserved.
//
//  Template generated by Syed Kashan
//

import UIKit

class JobListingViewController: BaseViewController, JobListingViewProtocol {
    
    @IBOutlet weak var tableViewJobListing: UITableView!
    
    var presenter: JobListingPresenterProtocol?
    
    override func viewDidLoad() {
        super.viewDidLoad()
        self.setupView()
    }
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        self.setupNavigation()
        self.networkRequest()
        
    }
    @IBAction func gotoMenu(_ sender: UIButton) {
        SSMM.shared.showSideMenu(screenType: .newJob)
    }
}

extension JobListingViewController: SetupViewController {
    func setupNavigation() {
        self.navigationController?.setNavigationBarHidden(false, animated: false)
        self.setNavigationWithLogoAndMenuButton()
    }
    func setupView() {
        self.tableViewJobListing.delegate = self
        self.tableViewJobListing.dataSource = self
        self.tableViewJobListing.register(UINib(nibName: "JobTableViewCell", bundle: nil), forCellReuseIdentifier: "JobTableViewCell")
        tableViewJobListing.addRefreshControl { [weak self] in
            guard let self = self else {return}
            self.networkRequest()
            self.tableViewJobListing.endRefreshing()
        }
    }
    func networkRequest() {
        self.presenter?.getNewMissions()
    }
    
    func showLoader() {
        DispatchQueue.main.async {
            self.showLoadingIndicator()
        }
    }
    func hideLoader() {
        DispatchQueue.main.async {
            self.hideLoadingIndicator()
        }
    }
    func reloadData() {
        DispatchQueue.main.async {
            self.tableViewJobListing.reloadData()
        }
    }
    
    func showNoData(message: String) {
        DispatchQueue.main.async {
            self.tableViewJobListing.setEmptyMessage(message)
        }
    }
}

extension JobListingViewController: UITableViewDelegate {
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        presenter?.selectedJob(index: indexPath)
    }
}

extension JobListingViewController: UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        guard let count = self.presenter?.missionData?.count else {return 0}
        return count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        guard let cell = tableViewJobListing.dequeueReusableCell(withIdentifier: "JobTableViewCell") as? JobTableViewCell,
            let data = self.presenter?.missionData?[indexPath.row] else {return UITableViewCell()}
        cell.configureCell(object: data)
        return cell
    }
    
}
