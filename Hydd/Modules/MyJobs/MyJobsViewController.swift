//
//  MyJobsViewController.swift
//  HYDD-driver
//
//  Created Syed Kashan on 06/02/2020.
//  Copyright Â© 2020 Syed Kashan. All rights reserved.
//
//  Template generated by Syed Kashan
//

import UIKit

class MyJobsViewController: BaseViewController, MyJobsViewProtocol {
    
    @IBOutlet weak var buttonCompleted: UIButton!
    @IBOutlet weak var buttonProgress: UIButton!
    @IBOutlet weak var viewProgress: UIView!
    @IBOutlet weak var viewCompleted: UIView!
    @IBOutlet weak var tableViewProgressCompleted: UITableView!
    
    var presenter: MyJobsPresenterProtocol?

	override func viewDidLoad() {
        super.viewDidLoad()
        setupView()
        tableViewProgressCompleted.addRefreshControl { [weak self] in
            guard let self = self else {return}
            self.networkRequest()
            self.tableViewProgressCompleted.endRefreshing()
        }
    }
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        self.setupNavigation()
        networkRequest()
    }
    @IBAction func gotoMenu(_ sender: UIButton) {
        SSMM.shared.showSideMenu(screenType: .myJob)
    }
    @IBAction func actionCompleted(_ sender: Any) {
        self.presenter?.screenView = .completed
        self.viewProgress.isHidden = true
        self.viewCompleted.isHidden = false
        self.presenter?.getMyMissions(progress: false)
    }
    @IBAction func actionProgress(_ sender: Any) {
        self.presenter?.screenView = .progress
        self.viewProgress.isHidden = false
        self.viewCompleted.isHidden = true
        self.presenter?.getMyMissions(progress: true)
    }
    
    func reloadView() {
        DispatchQueue.main.async {
            self.tableViewProgressCompleted.reloadData()
        }
    }
    func showLoader() {
        DispatchQueue.main.async {
            self.showLoadingIndicator()
        }
    }
    func hideLoader() {
        DispatchQueue.main.async {
            self.hideLoadingIndicator()
        }
    }
    func setEmptyMessage(text: String) {
        DispatchQueue.main.async {
            self.tableViewProgressCompleted.setEmptyMessage(text)
        }
    }
     
}

extension MyJobsViewController: SetupViewController {
    func setupNavigation() {
        self.navigationController?.setNavigationBarHidden(false, animated: false)
        self.setNavigationWithLogoAndMenuButton()
    }
    func setupView() {
        self.presenter?.screenView = .progress
        self.viewCompleted.isHidden = true
        self.buttonProgress.borderColor = .greySeperator
        self.buttonProgress.borderWidth = 1
        self.buttonCompleted.borderColor = .greySeperator
        self.buttonCompleted.borderWidth = 1
        self.buttonProgress.setAttributedTitle(DJM.shared.getValue(view: "job_completed_view", variable: "progress").styled(as: .gibsonRegular_13sp), for: .normal)
        self.buttonCompleted.setAttributedTitle(DJM.shared.getValue(view: "job_completed_view", variable: "completed").styled(as: .gibsonRegular_13sp), for: .normal)
        self.tableViewProgressCompleted.delegate = self
        self.tableViewProgressCompleted.dataSource = self
        self.tableViewProgressCompleted.register(UINib(nibName: "JobTableViewCell", bundle: nil), forCellReuseIdentifier: "JobTableViewCell")
    }
    func networkRequest() {
        guard let screen = self.presenter?.screenView else {return}
        if screen == .completed {
            self.presenter?.getMyMissions(progress: false)
        } else {
            self.presenter?.getMyMissions(progress: true)
        }
    }
}

extension MyJobsViewController: UITableViewDelegate {
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        self.presenter?.selectedData(index: indexPath)
    }
}

extension MyJobsViewController: UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        guard let type = self.presenter?.screenView else { return 0}
        switch type {
        case .progress:
            guard let count = self.presenter?.missionList?.count else {return 0}
            return count
        case .completed:
            guard let count = self.presenter?.missionList?.count else {return 0}
            return count
        }
    }
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        guard let count = self.presenter?.missionList?.count, count > indexPath.row else { return UITableViewCell()}
        guard let cell = tableViewProgressCompleted.dequeueReusableCell(withIdentifier: "JobTableViewCell") as? JobTableViewCell,
        let type = self.presenter?.screenView,
        let data = self.presenter?.missionList?[indexPath.row] else {return UITableViewCell()}
        switch type {
        case .progress:
            cell.configureCell(object: data)
        case .completed:
            cell.configureCell(object: data)
        }
        return cell
    }
}
