//
//  MyEarningsViewController.swift
//  HYDD-driver
//
//  Created Macbook Pro on 14/03/2020.
//  Copyright Â© 2020 Syed Kashan. All rights reserved.
//
//  Template generated by Syed Kashan
//

import UIKit

class MyEarningsViewController: BaseViewController, MyEarningsViewProtocol {
    
    @IBOutlet weak var ButtonMonth: UIButton!
    @IBOutlet weak var ButtonWeek: UIButton!
    @IBOutlet weak var buttonDay: UIButton!
    @IBOutlet weak var viewDay: UIView!
    @IBOutlet weak var viewWeek: UIView!
    @IBOutlet weak var viewMonth: UIView!
    @IBOutlet weak var buttonLeft: UIButton!
    @IBOutlet weak var labelTime: UILabel!
    @IBOutlet weak var buttonRight: UIButton!
    @IBOutlet weak var tableViewSummary: UITableView!
    var presenter: MyEarningsPresenterProtocol?

	override func viewDidLoad() {
        super.viewDidLoad()
        setupView()
        setupNavigation()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        networkRequest()
    }
    @IBAction func actionDay(_ sender: Any) {
        viewDay.backgroundColor = .hyddblue
        viewWeek.backgroundColor = .clear
        viewMonth.backgroundColor = .clear
        self.presenter?.setScreenType(screen: .day)
    }
    @IBAction func actionWeek(_ sender: Any) {
        viewDay.backgroundColor = .clear
        viewWeek.backgroundColor = .hyddblue
        viewMonth.backgroundColor = .clear
        self.presenter?.setScreenType(screen: .week)
    }
    @IBAction func actionMonth(_ sender: Any) {
        viewDay.backgroundColor = .clear
        viewWeek.backgroundColor = .clear
        viewMonth.backgroundColor = .hyddblue
        self.presenter?.setScreenType(screen: .month)
    }
    @IBAction func actionLeft(_ sender: Any) {
        self.presenter?.setSelectedTime(time: "-")
    }
    @IBAction func actionRight(_ sender: Any) {
        self.presenter?.setSelectedTime(time: "+")
    }
    @IBAction func gotoMenu(_ sender: UIButton) {
        SSMM.shared.showSideMenu(screenType: .earnings)
    }
    
    
    func showLoader() {
        DispatchQueue.main.async {
            self.showLoadingIndicator()
        }
    }
    
    func hideLoader() {
        DispatchQueue.main.async {
            self.hideLoadingIndicator()
        }
    }
    
    func reloadContent() {
        tableViewSummary.reloadData()
    }
    
    func showHideLeftButton(show: Bool) {
        if show {
            buttonLeft.setImage(UIImage(named: "icon_chevron_left_earning"), for: .normal)
        } else {
            buttonLeft.setImage(UIImage(), for: .normal)
        }
    }
    
    func showHideRightButton(show: Bool) {
        if show {
            buttonRight.setImage(UIImage(named: "icon_chevron_right_earning"), for: .normal)
        } else {
            buttonRight.setImage(UIImage(), for: .normal)
        }
    }
}

extension MyEarningsViewController: SetupViewController {
    func setupNavigation() {
        self.navigationController?.setNavigationBarHidden(false, animated: false)
        self.setNavigationWithLogoAndMenuButton()
    }
    
    func setupView() {
        self.presenter?.setScreenType(screen: .day)
        viewDay.backgroundColor = .hyddblue
        viewWeek.backgroundColor = .clear
        viewMonth.backgroundColor = .clear
        ButtonMonth.borderColor = .greySeperator
        ButtonMonth.borderWidth = 1
        buttonDay.borderColor = .greySeperator
        buttonDay.borderWidth = 1
        ButtonWeek.borderColor = .greySeperator
        ButtonWeek.borderWidth = 1
        self.tableViewSummary.delegate = self
        self.tableViewSummary.dataSource = self
        self.tableViewSummary.register(UINib(nibName: "EarningSummaryTableViewCell", bundle: nil), forCellReuseIdentifier: "EarningSummaryTableViewCell")
        self.tableViewSummary.register(UINib(nibName: "EarningTableViewCell", bundle: nil), forCellReuseIdentifier: "EarningTableViewCell")
        
        self.buttonDay.setAttributedTitle(DJM.shared.getValue(view: "earnings_view", variable: "day").styled(as: .gibsonRegular_13sp), for: .normal)
        self.ButtonWeek.setAttributedTitle(DJM.shared.getValue(view: "earnings_view", variable: "week").styled(as: .gibsonRegular_13sp), for: .normal)
        self.ButtonMonth.setAttributedTitle(DJM.shared.getValue(view: "earnings_view", variable: "month").styled(as: .gibsonRegular_13sp), for: .normal)
        
        self.labelTime.attributedText = DJM.shared.getValue(view: "earnings_view", variable: "today").styled(as: .gibsonRegular_21sp)
        
    }
    
    func networkRequest() {
        self.presenter?.setInitialData()
    }
    
}

extension MyEarningsViewController: UITableViewDelegate {
}

extension MyEarningsViewController: UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return 2
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        guard let screen = self.presenter?.screenType,
            let index = self.presenter?.selectedTime else {return UITableViewCell()}
        var data = [EarningSummary]()
        switch screen {
        case .day:
            guard let dataD = self.presenter?.earning?.day else {return UITableViewCell()}
            data = dataD
        case .week:
            guard let dataD = self.presenter?.earning?.week else {return UITableViewCell()}
            data = dataD
        case .month:
            guard let dataD = self.presenter?.earning?.month else {return UITableViewCell()}
            data = dataD
        }
        if index == 0 {
            showHideLeftButton(show: false)
            showHideRightButton(show: true)
        } else if index == data.count - 1 {
            showHideRightButton(show: false)
            showHideLeftButton(show: true)
        } else {
            showHideLeftButton(show: true)
            showHideRightButton(show: true)
        }
        self.labelTime.attributedText = data[index].time.styled(as: .gibsonRegular_21sp)
        if indexPath.row == 0 {
            guard let cell = tableViewSummary.dequeueReusableCell(withIdentifier: "EarningTableViewCell") as? EarningTableViewCell else {return UITableViewCell()}
            cell.configureCell(object: data[index].earning)
            return cell
            
        } else {
            guard let cell = tableViewSummary.dequeueReusableCell(withIdentifier: "EarningSummaryTableViewCell") as? EarningSummaryTableViewCell else {return UITableViewCell()}
            cell.configureCell(object: data[index])
            return cell
        }
        
    }
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        let value = indexPath.row == 0 ? 270.0 : 100.0
        return CGFloat(value)
    }
}
